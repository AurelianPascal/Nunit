using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using Azure.Messaging.EventHubs;
using Azure.Messaging.EventHubs.Producer;
using Azure.Identity;

public class EventHubPublisher : IAsyncDisposable
{
    private readonly EventHubProducerClient _producerClient;

    public EventHubPublisher(string fullyQualifiedNamespace, string eventHubName, TokenCredential credential, EventHubProducerClientOptions options)
    {
        _producerClient = new EventHubProducerClient(fullyQualifiedNamespace, eventHubName, credential, options);
    }

    public async Task SendMessagesAsync(List<EventData> events)
    {
        EventDataBatch eventBatch = await _producerClient.CreateBatchAsync();

        try
        {
            foreach (var eventData in events)
            {
                if (!eventBatch.TryAdd(eventData))
                {
                    // If the batch is full, send it and create a new one
                    await _producerClient.SendAsync(eventBatch);
                    eventBatch.Dispose();
                    eventBatch = await _producerClient.CreateBatchAsync();
                    eventBatch.TryAdd(eventData);
                }
            }

            if (eventBatch.Count > 0)
            {
                await _producerClient.SendAsync(eventBatch);
            }
        }
        finally
        {
            await eventBatch.DisposeAsync();
        }
    }

    public async ValueTask DisposeAsync()
    {
        await _producerClient.DisposeAsync();
    }
}

###


using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Azure.Messaging.EventHubs;
using Azure.Messaging.EventHubs.Producer;

public class TestEventHubProducerClient : EventHubProducerClient
{
    public List<EventDataBatch> SentBatches { get; } = new List<EventDataBatch>();

    public TestEventHubProducerClient(string fullyQualifiedNamespace, string eventHubName, TokenCredential credential, EventHubProducerClientOptions options)
        : base(fullyQualifiedNamespace, eventHubName, credential, options)
    {
    }

    public override async Task<EventDataBatch> CreateBatchAsync(CancellationToken cancellationToken = default)
    {
        return await Task.FromResult(new TestEventDataBatch());
    }

    public override async Task SendAsync(EventDataBatch eventBatch, CancellationToken cancellationToken = default)
    {
        if (eventBatch is TestEventDataBatch testBatch)
        {
            SentBatches.Add(testBatch);
        }

        await Task.CompletedTask;
    }
}

public class TestEventDataBatch : EventDataBatch
{
    private readonly List<EventData> _events = new List<EventData>();

    public override bool TryAdd(EventData eventData)
    {
        _events.Add(eventData);
        return true;
    }

    public override IEnumerable<EventData> AsEnumerable() => _events;

    public override int Count => _events.Count;
}

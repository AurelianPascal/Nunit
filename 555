using System;
using System.Collections.Concurrent;
using System.Threading.Tasks;
using Azure.Messaging.EventHubs;
using Azure.Messaging.EventHubs.Processor;

public class EventProcessor
{
    private readonly ConcurrentDictionary<string, Task> _partitionTasks = new ConcurrentDictionary<string, Task>();

    public async Task Handle(ProcessEventArgs args)
    {
        string partitionId = args.Partition.PartitionId;
        
        // Wait for any existing task for this partition to complete
        if (_partitionTasks.TryGetValue(partitionId, out var existingTask))
        {
            await existingTask;
        }

        // Define the task for processing the current event
        var processingTask = ProcessEventAsync(args);

        // Store the task in the dictionary
        _partitionTasks[partitionId] = processingTask;

        try
        {
            // Await the task to ensure it completes
            await processingTask;
        }
        finally
        {
            // Remove the task from the dictionary once it completes
            _partitionTasks.TryRemove(partitionId, out _);
        }
    }

    private async Task ProcessEventAsync(ProcessEventArgs args)
    {
        // Your event processing logic here
        Console.WriteLine($"Processing event for partition: {args.Partition.PartitionId}");
        
        // Simulate some asynchronous work
        await Task.Delay(1000);
    }
}


using System;
using System.Collections.Concurrent;
using System.Threading.Tasks;
using Azure.Messaging.EventHubs;
using Azure.Messaging.EventHubs.Processor;

public class EventProcessor
{
    private readonly ConcurrentDictionary<string, int> _partitionTaskCounters = new ConcurrentDictionary<string, int>();

    public async Task Handle(ProcessEventArgs args)
    {
        string partitionId = args.Partition.PartitionId;

        // Increment the counter for the partition
        var taskCounter = _partitionTaskCounters.AddOrUpdate(partitionId, 1, (key, oldValue) => oldValue + 1);

        // Log the current counter value
        Console.WriteLine($"Partition {partitionId} task count: {taskCounter}");

        // Check if there are multiple tasks running for the same partition
        if (taskCounter > 1)
        {
            Console.WriteLine($"Warning: Multiple tasks running for partition {partitionId}");
        }

        // Define the task for processing the current event
        var processingTask = ProcessEventAsync(args);

        try
        {
            // Await the task to ensure it completes
            await processingTask;
        }
        finally
        {
            // Decrement the counter for the partition
            _partitionTaskCounters.AddOrUpdate(partitionId, 0, (key, oldValue) => oldValue - 1);

            // Log the updated counter value
            var updatedTaskCounter = _partitionTaskCounters[partitionId];
            Console.WriteLine($"Partition {partitionId} task count after completion: {updatedTaskCounter}");
        }
    }

    private async Task ProcessEventAsync(ProcessEventArgs args)
    {
        // Your event processing logic here
        Console.WriteLine($"Processing event for partition: {args.Partition.PartitionId}");

        // Simulate some asynchronous work
        await Task.Delay(1000);
    }
}
###

using System;
using System.Collections.Concurrent;
using System.Data.SqlClient;
using System.Threading.Tasks;

public class Book
{
    public string Title { get; set; }
    public string Author { get; set; }
    // Other properties...
}

public class BookService
{
    private static int _openConnectionCount = 0;
    private static readonly object _lock = new object();

    public async Task Save(Book b)
    {
        SqlConnection connection = new SqlConnection("YourConnectionStringHere");
        
        try
        {
            IncrementConnectionCount();

            await connection.OpenAsync();
            Console.WriteLine($"Opened connection. Current open connection count: {_openConnectionCount}");

            // Your save logic here, e.g., using SqlCommand to insert the book details into the database
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
            throw;
        }
        finally
        {
            if (connection.State == System.Data.ConnectionState.Open)
            {
                await connection.CloseAsync();
                Console.WriteLine("Closed connection.");
            }

            DecrementConnectionCount();
            Console.WriteLine($"Current open connection count after closing: {_openConnectionCount}");
        }
    }

    private void IncrementConnectionCount()
    {
        lock (_lock)
        {
            _openConnectionCount++;
        }
    }

    private void DecrementConnectionCount()
    {
        lock (_lock)
        {
            _openConnectionCount--;
        }
    }
}



using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using System;
using System.Data;
using System.Data.SqlClient;
using System.Threading.Tasks;

[TestClass]
public class DatabaseConnectionWrapperTests
{
    private Mock<SqlConnection> _mockConnection;

    [TestInitialize]
    public void Setup()
    {
        _mockConnection = new Mock<SqlConnection>("YourConnectionStringHere");

        _mockConnection.Setup(conn => conn.OpenAsync(It.IsAny<System.Threading.CancellationToken>()))
            .Returns(Task.CompletedTask);

        _mockConnection.Setup(conn => conn.CloseAsync())
            .Returns(Task.CompletedTask);

        _mockConnection.Setup(conn => conn.Dispose());
    }

    [TestMethod]
    public async Task OpenConnectionAsync_ShouldOpenConnection()
    {
        var dbWrapper = new DatabaseConnectionWrapper(_mockConnection.Object);
        await dbWrapper.OpenConnectionAsync();

        _mockConnection.Verify(conn => conn.OpenAsync(It.IsAny<System.Threading.CancellationToken>()), Times.Once);
        Assert.AreEqual(ConnectionState.Open, dbWrapper.Connection.State);
    }

    [TestMethod]
    public async Task Dispose_ShouldCloseConnection()
    {
        var dbWrapper = new DatabaseConnectionWrapper(_mockConnection.Object);
        await dbWrapper.OpenConnectionAsync();

        dbWrapper.Dispose();

        _mockConnection.Verify(conn => conn.CloseAsync(), Times.Once);
        _mockConnection.Verify(conn => conn.Dispose(), Times.Once);
    }

    [TestMethod]
    public void Dispose_ShouldNotThrow_WhenCalledMultipleTimes()
    {
        var dbWrapper = new DatabaseConnectionWrapper(_mockConnection.Object);

        dbWrapper.Dispose();
        // Calling Dispose again should not throw any exception
        dbWrapper.Dispose();

        _mockConnection.Verify(conn => conn.Dispose(), Times.Exactly(2));
    }
}

public class DatabaseConnectionWrapper : IDisposable
{
    private SqlConnection _connection;
    private bool _disposed = false;

    public DatabaseConnectionWrapper(SqlConnection connection)
    {
        _connection = connection;
    }

    public async Task OpenConnectionAsync()
    {
        if (_connection.State != ConnectionState.Open)
        {
            await _connection.OpenAsync();
            Console.WriteLine("Connection opened.");
        }
    }

    public SqlConnection Connection => _connection;

    public void Dispose()
    {
        Dispose(true);
    }

    protected virtual void Dispose(bool disposing)
    {
        if (!_disposed)
        {
            if (disposing)
            {
                // Dispose managed resources
                if (_connection != null)
                {
                    if (_connection.State == ConnectionState.Open)
                    {
                        _connection.CloseAsync().Wait(); // Ensure the connection is closed asynchronously
                        Console.WriteLine("Connection closed.");
                    }
                    _connection.Dispose();
                    _connection = null;
                }
            }
            _disposed = true;
        }
    }
}













